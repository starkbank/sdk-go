package balance

import (
	"encoding/json"
	"github.com/starkbank/sdk-go/starkbank/utils"
	"github.com/starkinfra/core-go/starkcore/user/user"
	"time"
)

//	Balance struct
//
//	The Balance struct displays the current balance of the workspace,
//	which is the result of the sum of all transactions within this
//	workspace. The balance is never generated by the user, but it
//	can be retrieved to see the available information.
//
//	Attributes (return-only):
//	- Id [string]: Unique id returned when Balance is created. ex: "5656565656565656"
//	- Amount [int]: Current balance amount of the workspace in cents. ex: 200 (= R$ 2.00)
//	- Currency [string]: Currency of the current workspace. Expect others to be added eventually. ex: "BRL"
//	- Updated [time.Time]: Latest update datetime for the balance. ex: time.Date(2020, 3, 10, 10, 30, 10, 0, time.UTC)

type Balance struct {
	Id       string     `json:",omitempty"`
	Amount   int        `json:",omitempty"`
	Currency string     `json:",omitempty"`
	Updated  *time.Time `json:",omitempty"`
}

var object Balance
var resource = map[string]string{"name": "Balance"}

func Get(user user.User) Balance {
	//	Retrieve the Balance struct
	//
	//	Receive the Balance struct linked to your workspace in the Stark Bank API
	//
	//	Parameters (required):
	//	- user [Organization/Project struct]: Organization or Project struct. Not necessary if starkbank.user was set before function call
	//
	//	Return:
	//	- Balance struct with updated attributes
	balance := make(chan Balance)
	query := utils.Query(resource, nil, user)
	go func() {
		for content := range query {
			contentByte, _ := json.Marshal(content)
			err := json.Unmarshal(contentByte, &object)
			if err != nil {
				panic(err)
			}
			balance <- object
		}
		close(balance)
	}()
	return <-balance
}
