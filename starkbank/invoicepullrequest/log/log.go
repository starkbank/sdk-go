package log

import (
	"encoding/json"
	InvoicePullRequest "github.com/starkbank/sdk-go/starkbank/invoicepullrequest"
	"github.com/starkbank/sdk-go/starkbank/utils"
	Error "github.com/starkinfra/core-go/starkcore/error"
	"github.com/starkinfra/core-go/starkcore/user/user"
	"time"
)

//	InvoicePullRequest.Log struct
//
//	Every time a InvoicePullRequest entity is updated, a corresponding InvoicePullRequest.Log
//	is generated for the entity. This log is never generated by the
//	user, but it can be retrieved to check additional information
//	on the InvoicePullRequest.
//
//	Attributes (return-only):
//	- Id [string]: unique id returned when the log is created. ex: "5656565656565656"
//	- InvoicePullRequest [InvoicePullRequest struct]: InvoicePullRequest entity to which the log refers to.
//	- Errors [slice of strings]: list of errors linked to this InvoicePullRequest event.
//	- Type [string]: type of the InvoicePullRequest event which triggered the log creation. ex: "pending" or "success"
//	- Created [time.Time]: creation datetime for the log. ex: time.Date(2020, 3, 10, 10, 30, 10, 0, time.UTC)

type Log struct {
	Id      string                                `json:",omitempty"`
	Request InvoicePullRequest.InvoicePullRequest `json:",omitempty"`
	Errors  []string                              `json:",omitempty"`
	Type    string                                `json:",omitempty"`
	Created *time.Time                            `json:",omitempty"`
}

var resource = map[string]string{"name": "InvoicePullRequestLog"}

func Get(id string, user user.User) (Log, Error.StarkErrors) {
	//	Retrieve a specific InvoicePullRequest.Log by its id
	//
	//	Receive a single InvoicePullRequest.Log struct previously created by the Stark Bank API by its id
	//
	//	Parameters (required):
	//	- id [string]: struct unique id. ex: "5656565656565656"
	//
	//	Parameters (optional):
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- InvoicePullRequest.Log struct that corresponds to the given id.
	var invoicePullRequestLog Log
	get, err := utils.Get(resource, id, nil, user)
	unmarshalError := json.Unmarshal(get, &invoicePullRequestLog)
	if unmarshalError != nil {
		return invoicePullRequestLog, err
	}
	return invoicePullRequestLog, err
}

func Query(params map[string]interface{}, user user.User) (chan Log, chan Error.StarkErrors) {
	//	Retrieve InvoicePullRequest.Log structs
	//
	//	Receive a channel of InvoicePullRequest.Log structs previously created in the Stark Bank API
	//
	//	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- limit [int, default nil]: maximum number of structs to be retrieved. Unlimited if nil. ex: 35
	//		- after [string, default nil]: Date filter for structs created only after specified date. ex: "2022-11-10"
	//		- before [string, default nil]: Date filter for structs created only before specified date. ex: "2022-11-10"
	//		- types [slice of strings, default nil]: filter for log event types. []string{"paid", "registered"}
	//		- invoicePullRequestIds [slice of strings, default nil]: list of InvoicePullRequest ids to filter logs. ex: []string{"5656565656565656", "4545454545454545"}
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- Channel of InvoicePullRequest.Log structs with updated attributes
	var invoicePullRequestLog Log
	logs := make(chan Log)
	logsError := make(chan Error.StarkErrors)
	query, errorChannel := utils.Query(resource, params, user)
	go func() {
		for content := range query {
			contentByte, _ := json.Marshal(content)
			err := json.Unmarshal(contentByte, &invoicePullRequestLog)
			if err != nil {
				logsError <- Error.UnknownError(err.Error())
				continue
			}
			logs <- invoicePullRequestLog
		}
		for err := range errorChannel {
			logsError <- err
		}
		close(logsError)
		close(logs)
	}()
	return logs, logsError
}

func Page(params map[string]interface{}, user user.User) ([]Log, string, Error.StarkErrors) {
	//	Retrieve paged InvoicePullRequest.Log structs
	//
	//	Receive a slice of up to 100 InvoicePullRequest.Log structs previously created in the Stark Bank API and the cursor to the next page.
	//	Use this function instead of query if you want to manually page your requests.
	//
	//	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- cursor [string, default nil]: cursor returned on the previous page function call
	//		- limit [int, default 100]: maximum number of structs to be retrieved. It must be an int between 1 and 100. ex: 50
	//		- after [string, default nil]: Date filter for structs created only after specified date. ex: "2022-11-10"
	//		- before [string, default nil]: Date filter for structs created only before specified date. ex: "2022-11-10"
	//		- types [slice of strings, default nil]: filter for log event types. []string{"paid", "registered"}
	//		- invoicePullRequestIds [slice of strings, default nil]: list of InvoicePullRequest ids to filter logs. ex: []string{"5656565656565656", "4545454545454545"}
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- Slice of InvoicePullRequest.Log structs with updated attributes
	//	- Cursor to retrieve the next page of InvoicePullRequest.Log structs
	var invoicePullRequestLogs []Log
	page, cursor, err := utils.Page(resource, params, user)
	unmarshalError := json.Unmarshal(page, &invoicePullRequestLogs)
	if unmarshalError != nil {
		return invoicePullRequestLogs, cursor, err
	}
	return invoicePullRequestLogs, cursor, err
}