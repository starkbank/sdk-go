package transaction

import (
	"encoding/json"
	"github.com/starkbank/sdk-go/starkbank/utils"
	Error "github.com/starkinfra/core-go/starkcore/error"
	"github.com/starkinfra/core-go/starkcore/user/user"
	"time"
)

//	Transaction object
//
//	A Transaction is a transfer of funds between workspaces inside Stark Bank.
//	Transactions created by the user are only for internal transactions.
//	Other operations (such as transfer or charge-payment) will automatically
//	create a transaction for the user which can be retrieved for the statement.
//
//	When you initialize a Transaction, the entity will not be automatically
//	created in the Stark Bank API. The 'create' function sends the objects
//	to the Stark Bank API and returns the list of created objects.
//
//	Parameters (required):
//	- Amount [int]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
//	- Description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
//	- ExternalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
//	- ReceiverId [string]: unique id of the receiving workspace. ex: "5656565656565656"
//
//	Parameters (optional):
//	- Tags [slice of strings, default nil]: list of strings for tagging. ex: []string{"John", "Paul"}
//
//	Attributes (return-only):
//	- SenderId [string]: unique id of the sending workspace. ex: "5656565656565656"
//	- Source [string]: locator of the entity that generated the transaction. ex: "charge/1827351876292", "transfer/92873912873/chargeback"
//	- Id [string]: unique id returned when Transaction is created. ex: "7656565656565656"
//	- Fee [int]: fee charged when transaction is created. ex: 200 (= R$ 2.00)
//	- Balance [int]: account balance after transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
//	- Created [time.Time]: creation datetime for the transaction. ex: time.Date(2020, 3, 10, 10, 30, 10, 0, time.UTC),

type Transaction struct {
	Id          string     `json:",omitempty"`
	Amount      int        `json:",omitempty"`
	Description string     `json:",omitempty"`
	ExternalId  string     `json:",omitempty"`
	ReceiverId  string     `json:",omitempty"`
	Tags        []string   `json:",omitempty"`
	SenderId    string     `json:",omitempty"`
	Source      string     `json:",omitempty"`
	Fee         int        `json:",omitempty"`
	Balance     int        `json:",omitempty"`
	Created     *time.Time `json:",omitempty"`
}

var Object Transaction
var objects []Transaction
var resource = map[string]string{"name": "Transaction"}

func Create(transactions []Transaction, user user.User) ([]Transaction, Error.StarkErrors) {
	//	Create Transactions
	//
	//	Send a list of Transaction structs for creation in the Stark Bank API
	//
	//	Parameters (required):
	//	- transactions [slice of Transaction structs]: list of Transaction objects to be created in the API
	//
	//	Parameters (optional):
	//	- user [Organization/Project object, default nil]: Organization or Project object. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- Slice of Transaction objects with updated attributes
	create, err := utils.Multi(resource, transactions, nil, user)
	unmarshalError := json.Unmarshal(create, &transactions)
	if unmarshalError != nil {
		return transactions, err
	}
	return transactions, err
}

func Get(id string, user user.User) (Transaction, Error.StarkErrors) {
	//	Retrieve a specific Transaction
	//
	//	Receive a single Transaction object previously created by the Stark Bank API by passing its id
	//
	//	Parameters (required):
	//	- id [string]: object unique id. ex: "5656565656565656"
	//
	//	Parameters (optional):
	//	- user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- Transaction object with updated attributes
	var Object Transaction
	get, err := utils.Get(resource, id, nil, user)
	unmarshalError := json.Unmarshal(get, &Object)
	if unmarshalError != nil {
		return Object, err
	}
	return Object, err
}

func Query(params map[string]interface{}, user user.User) chan Transaction {
	//	Retrieve Transaction structs
	//
	//	Receive a channel of Transaction structs previously created by this user in the Stark Bank API
	//
	//	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- limit [int, default nil]: maximum number of objects to be retrieved. Unlimited if nil. ex: 35
	//		- after [string, default nil]: date filter for objects created only after specified date.
	//		- before [string, default nil]: date filter for objects created only before specified date.
	//		- tags [slice of strings, default nil]: tags to filter retrieved objects. ex: []string{"John", "Paul"}
	//		- ids [slice of strings, default nil]: list of ids to filter retrieved objects. ex: []string{"5656565656565656", "4545454545454545"}
	//		- status [string, default nil]: filter for status of retrieved objects. ex: "success"
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	 - Channel of Transaction objects with updated attributes
	var Object Transaction
	transactions := make(chan Transaction)
	query := utils.Query(resource, params, user)
	go func() {
		for content := range query {
			contentByte, _ := json.Marshal(content)
			err := json.Unmarshal(contentByte, &Object)
			if err != nil {
				panic(err)
			}
			transactions <- Object
		}
		close(transactions)
	}()
	return transactions
}

func Page(params map[string]interface{}, user user.User) ([]Transaction, string, Error.StarkErrors) {
	//	Retrieve paged Transaction structs
	//
	//	Receive a slice of up to 100 Transaction objects previously created in the Stark Bank API and the cursor to the next page.
	//	Use this function instead of query if you want to manually page your requests.
	//
	// 	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- cursor [string, default nil]: cursor returned on the previous page function call
	//		- limit [int, default 100]: maximum number of objects to be retrieved. It must be an int between 1 and 100. ex: 50
	//		- after [string, default nil]: date filter for objects created only after specified date.
	//		- before [string, default nil]: date filter for objects created only before specified date.
	//		- tags [slice of strings, default nil]: tags to filter retrieved objects. ex: []string{"John", "Paul"}
	//		- ids [slice of strings, default nil]: list of ids to filter retrieved objects. ex: []string{"5656565656565656", "4545454545454545"}
	//		- status [string, default nil]: filter for status of retrieved objects. ex: "success"
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkbank.User was set before function call
	//
	//	Return:
	//	- Slice of Transaction objects with updated attributes
	//	- Cursor to retrieve the next page of Transaction objects
	var objects []Transaction
	page, cursor, err := utils.Page(resource, params, user)
	unmarshalError := json.Unmarshal(page, &objects)
	if unmarshalError != nil {
		return objects, cursor, err
	}
	return objects, cursor, err
}
